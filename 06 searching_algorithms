05 August

Searching

__01_Linear_Search__

This is necessary when the array is unsorted. O(n).

JS's built-in array methods:
        .indexOf, 
        .includes, 
        .find
all execute linear search.

function linearSearch(arr, value) {
        for(let i = 0; i < arr.length; i++) {
                if (arr[i] === value) {
                        return i
                }
        }
        return -1
}

__02_Binary_Search__

Binary search **requires** a sorted array

Speaking roughly:
        1. identify a midpoint (or pivot)
        2. determine the relative order of the target to the midpoint.
        3. look in the subArray

This is a divide-and-conquer approach.

function binarySearch(arr, value) {
        let i = 0
        let j = arr.length - 1

        while ( i <= j ) {
                let pivot = Math.floor( (i + j) / 2)
                if (arr[pivot] === value ) {
                        return pivot
                } else if (arr[pivot] < value) {
                        i = pivot + 1
                } else {
                        j = pivot - 1
                }
        return -1
        }
}

Note that the time complexity of binary search is O(logn)

__03_String_Seach__

This is for searching for a substring in a string

Count the number of times a substring occurs
        str = "harold said haha in hamburg
        sub = "ha"

Naive implementation
        Loop over longer string
        Loop over shorter string
        If chars don't map, break
        If you complete inner loop, increment count
        return count

function naiveSearchString(sub, long) {
        if (sub.length > long.length) {
                return false
        }
        let count = 0
        for (let i = 0; i < long.length, i++) {
                for (let j = 0; j < sub.length; j++) {
                        if (sub[j] !== long[i+j]) {
                                break
                        }
                        if (j === sub.length - 1) {
                                count++
                        }

                }
        }
        return count
}

The KMP video is not up yet :(

