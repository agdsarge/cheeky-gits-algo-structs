graphs

vertices - the 'nodes' of a graph
edges - the connections between vertices (pairs of vertices)

directed - vertex pairs are ordered
undirected - vertext pairs are unordered

weighted - values associated with edges 
unweighted - no values associated with edges

you can store the edges either with 
    an adjacency list or 
    a matrix. 

the adjacency list is probably a little easier to understand.

class Graph {
    constructor() {
        this.adjacencyList = {}
    }

    addVertex(vertex){
        if(!this.adjacencyList[vertex]) {
            this.adjacencyList[vertex] = []
        }
        return this
    }

    addEdge(v1, v2){
        this.adjacencyList[v1].push(v2)
        this.adjacencyList[v2].push(v1)
        return this
    }
   
    removeEdge(v1, v2) {
        this.adjacencyList[v1] = this.adjacencyList[v1].filter(el => el !== v2)
        this.adjacencyList[v2] = this.adjacencyList[v2].filter(el => el !== v1)
    } 

    removeVertex(vertex) {
        this.adjacencyList[vertex].forEach(v => this.removeEdge(vertex, v))
        delete this.adjacencyList[vertex]
    }
    
    recursiveDFS(vertex){
        if (!vertex) return null
        let visited = {}
        let adjList = this.adjacencyList
        function traverse(v) {
            if (!v) return null
            visited[v] = true
                for (el of adjList[v] ) {
                    if (!visited[el]){
                        traverse(el)
                    }
                }
        }
        traverse(vertex)
        return Object.keys(visited) 
    }

    iterativeDFS(vertex) {
        if (!vertex) return null
        let stack = []
        visited = {}
        stack.push(vertex)
        // visited[vertex] = true
        while(stack.length > 0) {
            v = stack.pop()
            visited[v] = true
            this.adjacencyList[v].forEach(n => {
                if (!visited[n]) {
                    stack.push(n)    
                } 
            }) 
        }
    }

    searchBF(vertex) {
        if (!vertex) return null
        let q = []
        let visited = {}
        q.push(vertex) 

        while (q.length > 0) {
            v = q.shift()
            visited[v] = true
            this.adjacencyList[v].forEach(n => {
                if (!visited[n]) {
                    q.push(n)
                }
            })
        }
    }
}


Traversal

like with trees, there's DFS and BFS


